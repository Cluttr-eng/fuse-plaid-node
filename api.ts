/* tslint:disable */
/* eslint-disable */
/**
 * Plaid
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * A set of fields describing the balance for an account. Balance information may be cached unless the balance object was returned by `/accounts/balance/get`.
 * @export
 * @interface AccountBalance
 */
export interface AccountBalance {
    [key: string]: any;

    /**
     * The amount of funds available to be withdrawn from the account, as determined by the financial institution.  For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.  For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.  Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.  Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.  If `current` is `null` this field is guaranteed not to be `null`.
     * @type {number}
     * @memberof AccountBalance
     */
    'available': number | null;
    /**
     * The total amount of funds in or owed by the account.  For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.  For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account\'s balance includes both principal and any outstanding interest.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.  Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.  When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.
     * @type {number}
     * @memberof AccountBalance
     */
    'current': number | null;
    /**
     * The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof AccountBalance
     */
    'iso_currency_code': string | null;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time that the balance for the given account has been updated  This is currently only provided when the `min_last_updated_datetime` is passed when calling `/accounts/balance/get` for `ins_128026` (Capital One).
     * @type {string}
     * @memberof AccountBalance
     */
    'last_updated_datetime'?: string | null;
}
/**
 * A single account at a financial institution.
 * @export
 * @interface AccountBase
 */
export interface AccountBase {
    [key: string]: any;

    /**
     * Plaid’s unique identifier for the account. This value will not change unless Plaid can\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
     * @type {string}
     * @memberof AccountBase
     */
    'account_id': string;
    /**
     * 
     * @type {AccountBalance}
     * @memberof AccountBase
     */
    'balances': AccountBalance;
    /**
     * The last 2-4 alphanumeric characters of an account\'s official account number. Note that the mask may be non-unique between an Item\'s accounts, and it may also not match the mask that the bank displays to the user.
     * @type {string}
     * @memberof AccountBase
     */
    'mask': string | null;
    /**
     * The name of the account, either assigned by the user or by the financial institution itself
     * @type {string}
     * @memberof AccountBase
     */
    'name': string;
    /**
     * 
     * @type {AccountType}
     * @memberof AccountBase
     */
    'type': AccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof AccountBase
     */
    'subtype': AccountSubtype | null;
    /**
     * Uniquely identifies this account across all accounts for a single financial connection. Used for reconnection deduplication. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
     * @type {string}
     * @memberof AccountBase
     */
    'fingerprint'?: string;
    /**
     * 
     * @type {any}
     * @memberof AccountBase
     */
    'remote_data'?: any;
}


/**
 * Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters.
 * @export
 * @interface AccountFilter
 */
export interface AccountFilter {
    /**
     * A list of account subtypes to be filtered.
     * @type {Array<string>}
     * @memberof AccountFilter
     */
    'depository'?: Array<string>;
    /**
     * A list of account subtypes to be filtered.
     * @type {Array<string>}
     * @memberof AccountFilter
     */
    'credit'?: Array<string>;
    /**
     * A list of account subtypes to be filtered.
     * @type {Array<string>}
     * @memberof AccountFilter
     */
    'loan'?: Array<string>;
    /**
     * A list of account subtypes to be filtered.
     * @type {Array<string>}
     * @memberof AccountFilter
     */
    'investment'?: Array<string>;
}
/**
 * Identity information about an account
 * @export
 * @interface AccountIdentity
 */
export interface AccountIdentity {
    [key: string]: any;

    /**
     * Plaid’s unique identifier for the account. This value will not change unless Plaid can\'t reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
     * @type {string}
     * @memberof AccountIdentity
     */
    'account_id': string;
    /**
     * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
     * @type {Array<Owner>}
     * @memberof AccountIdentity
     */
    'owners': Array<Owner>;
}
/**
 * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */

export const AccountSubtype = {
    _401a: '401a',
    _401k: '401k',
    _403B: '403B',
    _457b: '457b',
    _529: '529',
    Brokerage: 'brokerage',
    CashIsa: 'cash isa',
    CryptoExchange: 'crypto exchange',
    EducationSavingsAccount: 'education savings account',
    Ebt: 'ebt',
    FixedAnnuity: 'fixed annuity',
    Gic: 'gic',
    HealthReimbursementArrangement: 'health reimbursement arrangement',
    Hsa: 'hsa',
    Isa: 'isa',
    Ira: 'ira',
    Lif: 'lif',
    LifeInsurance: 'life insurance',
    Lira: 'lira',
    Lrif: 'lrif',
    Lrsp: 'lrsp',
    NonCustodialWallet: 'non-custodial wallet',
    NonTaxableBrokerageAccount: 'non-taxable brokerage account',
    Other: 'other',
    OtherInsurance: 'other insurance',
    OtherAnnuity: 'other annuity',
    Prif: 'prif',
    Rdsp: 'rdsp',
    Resp: 'resp',
    Rlif: 'rlif',
    Rrif: 'rrif',
    Pension: 'pension',
    ProfitSharingPlan: 'profit sharing plan',
    Retirement: 'retirement',
    Roth: 'roth',
    Roth401k: 'roth 401k',
    Rrsp: 'rrsp',
    SepIra: 'sep ira',
    SimpleIra: 'simple ira',
    Sipp: 'sipp',
    StockPlan: 'stock plan',
    ThriftSavingsPlan: 'thrift savings plan',
    Tfsa: 'tfsa',
    Trust: 'trust',
    Ugma: 'ugma',
    Utma: 'utma',
    VariableAnnuity: 'variable annuity',
    CreditCard: 'credit card',
    Paypal: 'paypal',
    Cd: 'cd',
    Checking: 'checking',
    Savings: 'savings',
    MoneyMarket: 'money market',
    Prepaid: 'prepaid',
    Auto: 'auto',
    Business: 'business',
    Commercial: 'commercial',
    Construction: 'construction',
    Consumer: 'consumer',
    HomeEquity: 'home equity',
    Loan: 'loan',
    Mortgage: 'mortgage',
    Overdraft: 'overdraft',
    LineOfCredit: 'line of credit',
    Student: 'student',
    CashManagement: 'cash management',
    Keogh: 'keogh',
    MutualFund: 'mutual fund',
    Recurring: 'recurring',
    Rewards: 'rewards',
    SafeDeposit: 'safe deposit',
    Sarsep: 'sarsep',
    Payroll: 'payroll',
    Null: 'null'
} as const;

export type AccountSubtype = typeof AccountSubtype[keyof typeof AccountSubtype];


/**
 * `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */

export const AccountType = {
    Investment: 'investment',
    Credit: 'credit',
    Depository: 'depository',
    Loan: 'loan',
    Brokerage: 'brokerage',
    Other: 'other'
} as const;

export type AccountType = typeof AccountType[keyof typeof AccountType];


/**
 * AccountsBalanceGetRequest defines the request schema for `/accounts/balance/get`
 * @export
 * @interface AccountsBalanceGetRequest
 */
export interface AccountsBalanceGetRequest {
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof AccountsBalanceGetRequest
     */
    'access_token': string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AccountsBalanceGetRequest
     */
    'secret'?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AccountsBalanceGetRequest
     */
    'client_id'?: string;
    /**
     * 
     * @type {AccountsBalanceGetRequestOptions}
     * @memberof AccountsBalanceGetRequest
     */
    'options'?: AccountsBalanceGetRequestOptions;
}
/**
 * An optional object to filter `/accounts/balance/get` results.
 * @export
 * @interface AccountsBalanceGetRequestOptions
 */
export interface AccountsBalanceGetRequestOptions {
    /**
     * A list of `account_ids` to retrieve for the Item. The default value is `null`.  Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof AccountsBalanceGetRequestOptions
     */
    'account_ids'?: Array<string>;
    /**
     * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.  If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.  This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
     * @type {string}
     * @memberof AccountsBalanceGetRequestOptions
     */
    'min_last_updated_datetime'?: string;
}
/**
 * AccountsGetRequest defines the request schema for `/accounts/get`
 * @export
 * @interface AccountsGetRequest
 */
export interface AccountsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AccountsGetRequest
     */
    'client_id'?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AccountsGetRequest
     */
    'secret'?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof AccountsGetRequest
     */
    'access_token': string;
    /**
     * 
     * @type {AccountsGetRequestOptions}
     * @memberof AccountsGetRequest
     */
    'options'?: AccountsGetRequestOptions;
}
/**
 * An optional object to filter `/accounts/get` results.
 * @export
 * @interface AccountsGetRequestOptions
 */
export interface AccountsGetRequestOptions {
    /**
     * An array of `account_ids` to retrieve for the Account.
     * @type {Array<string>}
     * @memberof AccountsGetRequestOptions
     */
    'account_ids'?: Array<string>;
}
/**
 * AccountsGetResponse defines the response schema for `/accounts/get` and `/accounts/balance/get`.
 * @export
 * @interface AccountsGetResponse
 */
export interface AccountsGetResponse {
    [key: string]: any;

    /**
     * An array of financial institution accounts associated with the Item. If `/accounts/balance/get` was called, each account will include real-time balance information.
     * @type {Array<AccountBase>}
     * @memberof AccountsGetResponse
     */
    'accounts': Array<AccountBase>;
    /**
     * 
     * @type {Item}
     * @memberof AccountsGetResponse
     */
    'item': Item;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AccountsGetResponse
     */
    'request_id': string;
}
/**
 * A physical mailing address.
 * @export
 * @interface Address
 */
export interface Address {
    [key: string]: any;

    /**
     * 
     * @type {AddressData}
     * @memberof Address
     */
    'data': AddressData;
    /**
     * When `true`, identifies the address as the primary address on an account.
     * @type {boolean}
     * @memberof Address
     */
    'primary'?: boolean;
}
/**
 * Data about the components comprising an address.
 * @export
 * @interface AddressData
 */
export interface AddressData {
    [key: string]: any;

    /**
     * The full city name
     * @type {string}
     * @memberof AddressData
     */
    'city': string | null;
    /**
     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\"NC\"`
     * @type {string}
     * @memberof AddressData
     */
    'region': string | null;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof AddressData
     */
    'street': string;
    /**
     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.
     * @type {string}
     * @memberof AddressData
     */
    'postal_code': string | null;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof AddressData
     */
    'country': string | null;
}
/**
 * Data about the components comprising an address.
 * @export
 * @interface AddressDataNullable
 */
export interface AddressDataNullable {
    /**
     * The full city name
     * @type {string}
     * @memberof AddressDataNullable
     */
    'city': string | null;
    /**
     * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`. Example: `\"NC\"`
     * @type {string}
     * @memberof AddressDataNullable
     */
    'region': string | null;
    /**
     * The full street address Example: `\"564 Main Street, APT 15\"`
     * @type {string}
     * @memberof AddressDataNullable
     */
    'street': string;
    /**
     * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.
     * @type {string}
     * @memberof AddressDataNullable
     */
    'postal_code': string | null;
    /**
     * The ISO 3166-1 alpha-2 country code
     * @type {string}
     * @memberof AddressDataNullable
     */
    'country': string | null;
}
/**
 * A physical mailing address.
 * @export
 * @interface AddressNullable
 */
export interface AddressNullable {
    /**
     * 
     * @type {AddressData}
     * @memberof AddressNullable
     */
    'data': AddressData;
    /**
     * When `true`, identifies the address as the primary address on an account.
     * @type {boolean}
     * @memberof AddressNullable
     */
    'primary'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Aggregator = {
    Basiq: 'basiq',
    Belvo: 'belvo',
    Finicity: 'finicity',
    Finverse: 'finverse',
    Flinks: 'flinks',
    Mono: 'mono',
    Mx: 'mx',
    Plaid: 'plaid',
    Snaptrade: 'snaptrade',
    Teller: 'teller',
    Truelayer: 'truelayer'
} as const;

export type Aggregator = typeof Aggregator[keyof typeof Aggregator];


/**
 * An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty.
 * @export
 * @interface AuthGetNumbers
 */
export interface AuthGetNumbers {
    [key: string]: any;

    /**
     * An array of ACH numbers identifying accounts.
     * @type {Array<NumbersACH>}
     * @memberof AuthGetNumbers
     */
    'ach': Array<NumbersACH>;
}
/**
 * AuthGetRequest defines the request schema for `/auth/get`
 * @export
 * @interface AuthGetRequest
 */
export interface AuthGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof AuthGetRequest
     */
    'client_id'?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof AuthGetRequest
     */
    'secret'?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof AuthGetRequest
     */
    'access_token': string;
    /**
     * 
     * @type {AuthGetRequestOptions}
     * @memberof AuthGetRequest
     */
    'options'?: AuthGetRequestOptions;
}
/**
 * An optional object to filter `/auth/get` results.
 * @export
 * @interface AuthGetRequestOptions
 */
export interface AuthGetRequestOptions {
    /**
     * A list of `account_ids` to retrieve for the Item. Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof AuthGetRequestOptions
     */
    'account_ids'?: Array<string>;
}
/**
 * AuthGetResponse defines the response schema for `/auth/get`
 * @export
 * @interface AuthGetResponse
 */
export interface AuthGetResponse {
    [key: string]: any;

    /**
     * 
     * @type {AuthGetNumbers}
     * @memberof AuthGetResponse
     */
    'numbers': AuthGetNumbers;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof AuthGetResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CountryCode = {
    Ae: 'AE',
    Am: 'AM',
    Ar: 'AR',
    At: 'AT',
    Au: 'AU',
    Bd: 'BD',
    Be: 'BE',
    Bh: 'BH',
    Bm: 'BM',
    Bn: 'BN',
    Br: 'BR',
    Bw: 'BW',
    Ca: 'CA',
    Ch: 'CH',
    Ci: 'CI',
    Cl: 'CL',
    Cm: 'CM',
    Cn: 'CN',
    Co: 'CO',
    Cz: 'CZ',
    De: 'DE',
    Dz: 'DZ',
    Eg: 'EG',
    Es: 'ES',
    Fi: 'FI',
    Fk: 'FK',
    Fr: 'FR',
    Gb: 'GB',
    Gg: 'GG',
    Gh: 'GH',
    Gm: 'GM',
    Gr: 'GR',
    Hk: 'HK',
    Id: 'ID',
    Ie: 'IE',
    Il: 'IL',
    Im: 'IM',
    In: 'IN',
    It: 'IT',
    Je: 'JE',
    Jo: 'JO',
    Jp: 'JP',
    Ke: 'KE',
    Kh: 'KH',
    Kr: 'KR',
    Kw: 'KW',
    La: 'LA',
    Lb: 'LB',
    Lk: 'LK',
    Lt: 'LT',
    Lu: 'LU',
    Mc: 'MC',
    Mo: 'MO',
    Mt: 'MT',
    Mu: 'MU',
    Mv: 'MV',
    Mx: 'MX',
    My: 'MY',
    Ng: 'NG',
    Nl: 'NL',
    Np: 'NP',
    Nz: 'NZ',
    Om: 'OM',
    Pe: 'PE',
    Ph: 'PH',
    Pk: 'PK',
    Pl: 'PL',
    Pt: 'PT',
    Qa: 'QA',
    Ru: 'RU',
    Sa: 'SA',
    Se: 'SE',
    Sg: 'SG',
    Sl: 'SL',
    Th: 'TH',
    Tr: 'TR',
    Tw: 'TW',
    Tz: 'TZ',
    Ug: 'UG',
    Us: 'US',
    Uy: 'UY',
    Vn: 'VN',
    Za: 'ZA',
    Zm: 'ZM',
    Zw: 'ZW'
} as const;

export type CountryCode = typeof CountryCode[keyof typeof CountryCode];


/**
 * Valid account subtypes for credit accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-credit).
 * @export
 * @enum {string}
 */

export const CreditAccountSubtype = {
    CreditCard: 'credit card',
    Paypal: 'paypal',
    All: 'all'
} as const;

export type CreditAccountSubtype = typeof CreditAccountSubtype[keyof typeof CreditAccountSubtype];


/**
 * A filter to apply to `credit`-type accounts
 * @export
 * @interface CreditFilter
 */
export interface CreditFilter {
    [key: string]: any;

    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<CreditAccountSubtype>}
     * @memberof CreditFilter
     */
    'account_subtypes': Array<CreditAccountSubtype>;
}
/**
 * Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).
 * @export
 * @enum {string}
 */

export const DepositoryAccountSubtype = {
    Checking: 'checking',
    Savings: 'savings',
    Hsa: 'hsa',
    Cd: 'cd',
    MoneyMarket: 'money market',
    Paypal: 'paypal',
    Prepaid: 'prepaid',
    CashManagement: 'cash management',
    Ebt: 'ebt',
    All: 'all'
} as const;

export type DepositoryAccountSubtype = typeof DepositoryAccountSubtype[keyof typeof DepositoryAccountSubtype];


/**
 * A filter to apply to `depository`-type accounts
 * @export
 * @interface DepositoryFilter
 */
export interface DepositoryFilter {
    [key: string]: any;

    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<DepositoryAccountSubtype>}
     * @memberof DepositoryFilter
     */
    'account_subtypes': Array<DepositoryAccountSubtype>;
}
/**
 * An object representing an email address
 * @export
 * @interface Email
 */
export interface Email {
    [key: string]: any;

    /**
     * The email address.
     * @type {string}
     * @memberof Email
     */
    'data': string;
    /**
     * When `true`, identifies the email address as the primary email on an account.
     * @type {boolean}
     * @memberof Email
     */
    'primary': boolean;
    /**
     * The type of email account as described by the financial institution.
     * @type {string}
     * @memberof Email
     */
    'type': EmailTypeEnum;
}

export const EmailTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Other: 'other'
} as const;

export type EmailTypeEnum = typeof EmailTypeEnum[keyof typeof EmailTypeEnum];

/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * Unique identifier for the user or business account that is connecting to an institution. Use this id when calling the GET /entities/${entity_id} endpoint.
     * @type {string}
     * @memberof Entity
     */
    'id': string;
    /**
     * Name for the user or business account. Required for EU connections.
     * @type {string}
     * @memberof Entity
     */
    'name'?: string;
    /**
     * Email address associated with the user or business account. One of email/phone is required for EU connections.
     * @type {string}
     * @memberof Entity
     */
    'email'?: string;
    /**
     * Phone number associated with the user or business account. One of email/phone is required for EU connections.
     * @type {string}
     * @memberof Entity
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface FuseApiAggregatorError
 */
export interface FuseApiAggregatorError {
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'request_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface FuseApiError
 */
export interface FuseApiError {
    /**
     * 
     * @type {string}
     * @memberof FuseApiError
     */
    'request_id': string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiError
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiError
     */
    'details': string;
    /**
     * 
     * @type {FuseApiErrorCode}
     * @memberof FuseApiError
     */
    'code': FuseApiErrorCode;
    /**
     * 
     * @type {FuseApiErrorType}
     * @memberof FuseApiError
     */
    'type': FuseApiErrorType;
    /**
     * 
     * @type {string}
     * @memberof FuseApiError
     */
    'source': FuseApiErrorSourceEnum;
    /**
     * 
     * @type {FuseApiErrorData}
     * @memberof FuseApiError
     */
    'data'?: FuseApiErrorData;
}

export const FuseApiErrorSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
} as const;

export type FuseApiErrorSourceEnum = typeof FuseApiErrorSourceEnum[keyof typeof FuseApiErrorSourceEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const FuseApiErrorCode = {
    AssetReportGenerationFailed: 'asset_report_generation_failed',
    AssetReportNotReady: 'asset_report_not_ready',
    ClientError: 'client_error',
    InvalidHeaders: 'invalid_headers',
    InvalidRequestBody: 'invalid_request_body',
    InternalServerError: 'internal_server_error',
    OrganizationNotFound: 'organization_not_found',
    EntityNotFound: 'entity_not_found',
    SessionNotFound: 'session_not_found',
    FinancialInstitutionNotFound: 'financial_institution_not_found',
    ConsumerRiskReportNotFound: 'consumer_risk_report_not_found',
    ConsumerRiskReportCustomizationNotFound: 'consumer_risk_report_customization_not_found',
    MissingAccessToken: 'missing_access_token',
    MissingPlaidClientIdHeader: 'missing_plaid_client_id_header',
    MissingPlaidSecretHeader: 'missing_plaid_secret_header',
    MissingMxClientIdHeader: 'missing_mx_client_id_header',
    MissingMxApiKeyHeader: 'missing_mx_api_key_header',
    MissingTellerPrivateKeyHeader: 'missing_teller_private_key_header',
    MissingTellerCertificateHeader: 'missing_teller_certificate_header',
    MissingTellerApplicationIdHeader: 'missing_teller_application_id_header',
    MissingTellerSigningSecretHeader: 'missing_teller_signing_secret_header',
    MissingSnaptradeClientIdHeader: 'missing_snaptrade_client_id_header',
    MissingSnaptradeConsumerKeyHeader: 'missing_snaptrade_consumer_key_header',
    MissingFlinksCaCustomerIdHeader: 'missing_flinks_ca_customer_id_header',
    MissingFlinksUsCustomerIdHeader: 'missing_flinks_us_customer_id_header',
    MissingFlinksCaInstanceIdHeader: 'missing_flinks_ca_instance_id_header',
    MissingFlinksUsInstanceIdHeader: 'missing_flinks_us_instance_id_header',
    MissingMonoPublicKeyHeader: 'missing_mono_public_key_header',
    MissingMonoSecretKeyHeader: 'missing_mono_secret_key_header',
    MissingMonoWebhookSecretHeader: 'missing_mono_webhook_secret_header',
    MissingTruelayerClientIdHeader: 'missing_truelayer_client_id_header',
    MissingTruelayerClientSecretHeader: 'missing_truelayer_client_secret_header',
    MissingTruelayerRedirectUriHeader: 'missing_truelayer_redirect_uri_header',
    MissingFinverseClientIdHeader: 'missing_finverse_client_id_header',
    MissingFinverseClientSecretHeader: 'missing_finverse_client_secret_header',
    MissingFinverseRedirectUriHeader: 'missing_finverse_redirect_uri_header',
    MissingBasiqApiKeyHeader: 'missing_basiq_api_key_header',
    MissingBelvoSecretIdHeader: 'missing_belvo_secret_id_header',
    MissingBelvoSecretPasswordHeader: 'missing_belvo_secret_password_header',
    MissingFinicityPartnerIdHeader: 'missing_finicity_partner_id_header',
    MissingFinicityAppKeyHeader: 'missing_finicity_app_key_header',
    MissingFinicityPartnerSecretHeader: 'missing_finicity_partner_secret_header',
    MissingFuseVerificationHeader: 'missing_fuse_verification_header',
    AggregatorError: 'aggregator_error',
    AggregatorDisconnectedError: 'aggregator_disconnected_error',
    AggregatorConnectionFinishedError: 'aggregator_connection_finished_error',
    AggregatorRateLimitError: 'aggregator_rate_limit_error',
    RequestBodyMissing: 'request_body_missing',
    RequestContentTypeInvalid: 'request_content_type_invalid',
    RequestBodyInvalidJson: 'request_body_invalid_json',
    WebhookError: 'webhook_error',
    Timeout: 'timeout',
    InvalidCertificate: 'invalid_certificate',
    InvalidPrivateKey: 'invalid_private_key',
    Other: 'other'
} as const;

export type FuseApiErrorCode = typeof FuseApiErrorCode[keyof typeof FuseApiErrorCode];


/**
 * 
 * @export
 * @interface FuseApiErrorData
 */
export interface FuseApiErrorData {
    /**
     * 
     * @type {Aggregator}
     * @memberof FuseApiErrorData
     */
    'aggregator'?: Aggregator;
    /**
     * 
     * @type {Array<FuseApiAggregatorError>}
     * @memberof FuseApiErrorData
     */
    'errors'?: Array<FuseApiAggregatorError>;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const FuseApiErrorType = {
    AuthError: 'auth_error',
    NotFound: 'not_found',
    BadRequest: 'bad_request',
    ServerError: 'server_error'
} as const;

export type FuseApiErrorType = typeof FuseApiErrorType[keyof typeof FuseApiErrorType];


/**
 * IdentityGetRequest defines the request schema for `/identity/get`
 * @export
 * @interface IdentityGetRequest
 */
export interface IdentityGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof IdentityGetRequest
     */
    'client_id'?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof IdentityGetRequest
     */
    'secret'?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof IdentityGetRequest
     */
    'access_token': string;
    /**
     * 
     * @type {IdentityGetRequestOptions}
     * @memberof IdentityGetRequest
     */
    'options'?: IdentityGetRequestOptions;
}
/**
 * An optional object to filter `/identity/get` results.
 * @export
 * @interface IdentityGetRequestOptions
 */
export interface IdentityGetRequestOptions {
    /**
     * A list of `account_ids` to retrieve for the Item. Note: An error will be returned if a provided `account_id` is not associated with the Item.
     * @type {Array<string>}
     * @memberof IdentityGetRequestOptions
     */
    'account_ids'?: Array<string>;
}
/**
 * IdentityGetResponse defines the response schema for `/identity/get`
 * @export
 * @interface IdentityGetResponse
 */
export interface IdentityGetResponse {
    [key: string]: any;

    /**
     * The accounts for which Identity data has been requested
     * @type {Array<AccountIdentity>}
     * @memberof IdentityGetResponse
     */
    'accounts': Array<AccountIdentity>;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof IdentityGetResponse
     */
    'request_id': string;
}
/**
 * Details relating to a specific financial institution
 * @export
 * @interface Institution
 */
export interface Institution {
    [key: string]: any;

    /**
     * Unique identifier for the institution. Note that the same institution may have multiple records, each with different institution IDs; for example, if the institution has migrated to OAuth, there may be separate `institution_id`s for the OAuth and non-OAuth versions of the institution. Institutions that operate in different countries or with multiple login portals may also have separate `institution_id`s for each country or portal.
     * @type {string}
     * @memberof Institution
     */
    'institution_id': string;
    /**
     * The official name of the institution.
     * @type {string}
     * @memberof Institution
     */
    'name': string;
    /**
     * A list of the country codes supported by the institution.
     * @type {Array<CountryCode>}
     * @memberof Institution
     */
    'country_codes': Array<CountryCode>;
    /**
     * The URL for the institution\'s website
     * @type {string}
     * @memberof Institution
     */
    'url'?: string | null;
    /**
     * Base64 encoded representation of the institution\'s logo, returned as a base64 encoded 152x152 PNG. Not all institutions\' logos are available.
     * @type {string}
     * @memberof Institution
     */
    'logo'?: string | null;
    /**
     * Url of the institution logo. Not all institutions\' logos are available.
     * @type {string}
     * @memberof Institution
     */
    'logo_url'?: string | null;
}
/**
 * InstitutionsGetByIdRequest defines the request schema for `/institutions/get_by_id`
 * @export
 * @interface InstitutionsGetByIdRequest
 */
export interface InstitutionsGetByIdRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsGetByIdRequest
     */
    'client_id'?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof InstitutionsGetByIdRequest
     */
    'secret'?: string;
    /**
     * The ID of the institution to get details about
     * @type {string}
     * @memberof InstitutionsGetByIdRequest
     */
    'institution_id': string;
    /**
     * Specify which country or countries to include institutions from, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. 
     * @type {Array<CountryCode>}
     * @memberof InstitutionsGetByIdRequest
     */
    'country_codes': Array<CountryCode>;
}
/**
 * InstitutionsGetByIdResponse defines the response schema for `/institutions/get_by_id`
 * @export
 * @interface InstitutionsGetByIdResponse
 */
export interface InstitutionsGetByIdResponse {
    [key: string]: any;

    /**
     * 
     * @type {Institution}
     * @memberof InstitutionsGetByIdResponse
     */
    'institution': Institution;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof InstitutionsGetByIdResponse
     */
    'request_id': string;
}
/**
 * Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment).
 * @export
 * @enum {string}
 */

export const InvestmentAccountSubtype = {
    _529: '529',
    _401a: '401a',
    _401k: '401k',
    _403B: '403B',
    _457b: '457b',
    Brokerage: 'brokerage',
    CashIsa: 'cash isa',
    CryptoExchange: 'crypto exchange',
    EducationSavingsAccount: 'education savings account',
    FixedAnnuity: 'fixed annuity',
    Gic: 'gic',
    HealthReimbursementArrangement: 'health reimbursement arrangement',
    Hsa: 'hsa',
    Ira: 'ira',
    Isa: 'isa',
    Keogh: 'keogh',
    Lif: 'lif',
    LifeInsurance: 'life insurance',
    Lira: 'lira',
    Lrif: 'lrif',
    Lrsp: 'lrsp',
    MutualFund: 'mutual fund',
    NonCustodialWallet: 'non-custodial wallet',
    NonTaxableBrokerageAccount: 'non-taxable brokerage account',
    Other: 'other',
    OtherAnnuity: 'other annuity',
    OtherInsurance: 'other insurance',
    Pension: 'pension',
    Prif: 'prif',
    ProfitSharingPlan: 'profit sharing plan',
    Qshr: 'qshr',
    Rdsp: 'rdsp',
    Resp: 'resp',
    Retirement: 'retirement',
    Rlif: 'rlif',
    Roth: 'roth',
    Roth401k: 'roth 401k',
    Rrif: 'rrif',
    Rrsp: 'rrsp',
    Sarsep: 'sarsep',
    SepIra: 'sep ira',
    SimpleIra: 'simple ira',
    Sipp: 'sipp',
    StockPlan: 'stock plan',
    Tfsa: 'tfsa',
    Trust: 'trust',
    Ugma: 'ugma',
    Utma: 'utma',
    VariableAnnuity: 'variable annuity',
    All: 'all'
} as const;

export type InvestmentAccountSubtype = typeof InvestmentAccountSubtype[keyof typeof InvestmentAccountSubtype];


/**
 * A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier).
 * @export
 * @interface InvestmentFilter
 */
export interface InvestmentFilter {
    [key: string]: any;

    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<InvestmentAccountSubtype>}
     * @memberof InvestmentFilter
     */
    'account_subtypes': Array<InvestmentAccountSubtype>;
}
/**
 * Metadata about the Item.
 * @export
 * @interface Item
 */
export interface Item {
    [key: string]: any;

    /**
     * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
     * @type {string}
     * @memberof Item
     */
    'item_id': string;
    /**
     * The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
     * @type {string}
     * @memberof Item
     */
    'institution_id'?: string | null;
    /**
     * The URL registered to receive webhooks for the Item.
     * @type {string}
     * @memberof Item
     */
    'webhook': string | null;
    /**
     * 
     * @type {PlaidError}
     * @memberof Item
     */
    'error': PlaidError | null;
    /**
     * A list of initialized products for the Item. In almost all cases, this will be the same as the `billed_products` field. For some products, it is possible for the product to be initialized on an Item but not yet billed (e.g. Assets, before `/asset_report/create` has been called), in which case the product may appear in `products` but not in `billed_products`. 
     * @type {Array<Products>}
     * @memberof Item
     */
    'products'?: Array<Products>;
}
/**
 * ItemPublicTokenExchangeRequest defines the request schema for `/item/public_token/exchange`
 * @export
 * @interface ItemPublicTokenExchangeRequest
 */
export interface ItemPublicTokenExchangeRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemPublicTokenExchangeRequest
     */
    'client_id'?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemPublicTokenExchangeRequest
     */
    'secret'?: string;
    /**
     * Your `public_token`, obtained from the Link `onSuccess` callback or `/sandbox/item/public_token/create`.
     * @type {string}
     * @memberof ItemPublicTokenExchangeRequest
     */
    'public_token': string;
}
/**
 * ItemPublicTokenExchangeResponse defines the response schema for `/item/public_token/exchange`
 * @export
 * @interface ItemPublicTokenExchangeResponse
 */
export interface ItemPublicTokenExchangeResponse {
    [key: string]: any;

    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemPublicTokenExchangeResponse
     */
    'access_token': string;
    /**
     * The `item_id` value of the Item associated with the returned `access_token`
     * @type {string}
     * @memberof ItemPublicTokenExchangeResponse
     */
    'item_id': string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemPublicTokenExchangeResponse
     */
    'request_id': string;
}
/**
 * ItemRemoveRequest defines the request schema for `/item/remove`
 * @export
 * @interface ItemRemoveRequest
 */
export interface ItemRemoveRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof ItemRemoveRequest
     */
    'client_id'?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof ItemRemoveRequest
     */
    'secret'?: string;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof ItemRemoveRequest
     */
    'access_token': string;
}
/**
 * ItemRemoveResponse defines the response schema for `/item/remove`
 * @export
 * @interface ItemRemoveResponse
 */
export interface ItemRemoveResponse {
    [key: string]: any;

    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof ItemRemoveResponse
     */
    'request_id': string;
}
/**
 * By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `\"all\"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window. 
 * @export
 * @interface LinkTokenAccountFilters
 */
export interface LinkTokenAccountFilters {
    [key: string]: any;

    /**
     * 
     * @type {DepositoryFilter}
     * @memberof LinkTokenAccountFilters
     */
    'depository'?: DepositoryFilter;
    /**
     * 
     * @type {CreditFilter}
     * @memberof LinkTokenAccountFilters
     */
    'credit'?: CreditFilter;
    /**
     * 
     * @type {LoanFilter}
     * @memberof LinkTokenAccountFilters
     */
    'loan'?: LoanFilter;
    /**
     * 
     * @type {InvestmentFilter}
     * @memberof LinkTokenAccountFilters
     */
    'investment'?: InvestmentFilter;
}
/**
 * LinkTokenCreateRequest defines the request schema for `/link/token/create`
 * @export
 * @interface LinkTokenCreateRequest
 */
export interface LinkTokenCreateRequest {
    /**
     * The session client secret created from the \'Create session client secret\' endpoint
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'session_client_secret'?: string;
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'client_id'?: string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'secret'?: string;
    /**
     * The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \"This Application\" instead.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'client_name': string;
    /**
     * The language that Link should be displayed in. When initializing with Identity Verification, this field is not used; for more details, see [Identity Verification supported languages](https://www.plaid.com/docs/identity-verification/#supported-languages).  Supported languages are: - Danish (`\'da\'`) - Dutch (`\'nl\'`) - English (`\'en\'`) - Estonian (`\'et\'`) - French (`\'fr\'`) - German (`\'de\'`) - Italian (`\'it\'`) - Latvian (`\'lv\'`) - Lithuanian (`\'lt\'`) - Norwegian (`\'no\'`) - Polish (`\'pl\'`) - Portuguese (`\'pt\'`) - Romanian (`\'ro\'`) - Spanish (`\'es\'`) - Swedish (`\'sv\'`)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'language': string;
    /**
     * 
     * @type {LinkTokenCreateRequestUser}
     * @memberof LinkTokenCreateRequest
     */
    'user': LinkTokenCreateRequestUser;
    /**
     * The destination URL to which any webhooks should be sent. Note that webhooks for Payment Initiation (e-wallet transactions only), Transfer, Bank Transfer (including Auth micro-deposit notification webhooks) and Identity Verification are configured via the Dashboard instead.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'webhook'?: string;
    /**
     * A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://_*.example.com/oauth.html`. Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api). If initializing on Android, `android_package_name` must be specified instead and `redirect_uri` should be left blank.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'redirect_uri'?: string;
    /**
     * The name of your app\'s Android package. Required if using the `link_token` to initialize Link on Android. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). When creating a `link_token` for initializing Link on other platforms, `android_package_name` must be left blank and `redirect_uri` should be used instead.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'android_package_name'?: string;
    /**
     * Used for certain Europe-only configurations, as well as certain legacy use cases in other regions.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'institution_id'?: string;
    /**
     * 
     * @type {LinkTokenAccountFilters}
     * @memberof LinkTokenCreateRequest
     */
    'account_filters'?: LinkTokenAccountFilters;
    /**
     * The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`.
     * @type {string}
     * @memberof LinkTokenCreateRequest
     */
    'link_customization_name'?: string;
    /**
     * Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. Access to European institutions requires additional compliance steps. To request access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`, or the customization may not be applied.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `[\'US\']`.
     * @type {Array<CountryCode>}
     * @memberof LinkTokenCreateRequest
     */
    'country_codes'?: Array<CountryCode>;
    /**
     * List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted (unless you are using update mode to add Income or Assets to an Item); required otherwise.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  The products specified here will determine which institutions will be available to your users in Link. Only institutions that support *all* requested products can be selected; a if a user attempts to select an institution that does not support a listed product, a \"Connectivity not supported\" error message will appear in Link. To maximize the number of institutions available, initialize Link with the minimal product set required for your use case. Additional products can be included via the [`required_if_supported_products`](https://plaid.com/docs/api/tokens/#link-token-create-request-required-if-supported-products) field, or can be initialized by calling the endpoint after obtaining an access token. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/initializing-products/).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.
     * @type {Array<Products>}
     * @memberof LinkTokenCreateRequest
     */
    'products'?: Array<Products>;
}
/**
 * An object specifying information about the end user who will be linking their account.
 * @export
 * @interface LinkTokenCreateRequestUser
 */
export interface LinkTokenCreateRequestUser {
    /**
     * A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. It is currently used as a means of searching logs for the given user in the Plaid Dashboard.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    'client_user_id': string;
    /**
     * The user\'s full legal name, used for [micro-deposit based verification flows](https://plaid.com/docs/auth/coverage/). For a small number of customers on legacy flows, providing this field is required to enable micro-deposit-based flows. For all other customers, this field is optional, but providing the user\'s name in this field when using micro-deposit-based verification will enable certain risk checks and can reduce micro-deposit fraud.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    'legal_name'?: string;
    /**
     * The user\'s phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. This field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user). Can also be used to prefill Link fields when used with Identity Verification.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    'phone_number'?: string;
    /**
     * The user\'s email address. This field is optional, but required to enable the [pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#pre-authenticated-rux). Can also be used to prefill Link fields when used with Identity Verification.
     * @type {string}
     * @memberof LinkTokenCreateRequestUser
     */
    'email_address'?: string;
}
/**
 * LinkTokenCreateResponse defines the response schema for `/link/token/create`
 * @export
 * @interface LinkTokenCreateResponse
 */
export interface LinkTokenCreateResponse {
    [key: string]: any;

    /**
     * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.
     * @type {string}
     * @memberof LinkTokenCreateResponse
     */
    'link_token': string;
    /**
     * The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours. A `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes.
     * @type {string}
     * @memberof LinkTokenCreateResponse
     */
    'expiration': string;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof LinkTokenCreateResponse
     */
    'request_id': string;
}
/**
 * Valid account subtypes for loan accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-loan).
 * @export
 * @enum {string}
 */

export const LoanAccountSubtype = {
    Auto: 'auto',
    Business: 'business',
    Commercial: 'commercial',
    Construction: 'construction',
    Consumer: 'consumer',
    HomeEquity: 'home equity',
    Loan: 'loan',
    Mortgage: 'mortgage',
    LineOfCredit: 'line of credit',
    Student: 'student',
    Other: 'other',
    All: 'all'
} as const;

export type LoanAccountSubtype = typeof LoanAccountSubtype[keyof typeof LoanAccountSubtype];


/**
 * A filter to apply to `loan`-type accounts
 * @export
 * @interface LoanFilter
 */
export interface LoanFilter {
    [key: string]: any;

    /**
     * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). 
     * @type {Array<LoanAccountSubtype>}
     * @memberof LoanFilter
     */
    'account_subtypes': Array<LoanAccountSubtype>;
}
/**
 * Identifying information for transferring money to or from a US account via ACH or wire transfer.
 * @export
 * @interface NumbersACH
 */
export interface NumbersACH {
    [key: string]: any;

    /**
     * The Plaid account ID associated with the account numbers
     * @type {string}
     * @memberof NumbersACH
     */
    'account_id': string;
    /**
     * The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \"tokenized\" routing and account numbers, which are not the user\'s actual account and routing numbers. These tokenized account numbers (also known as TANs) should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.
     * @type {string}
     * @memberof NumbersACH
     */
    'account': string;
    /**
     * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
     * @type {string}
     * @memberof NumbersACH
     */
    'routing': string;
    /**
     * The wire transfer routing number for the account, if available
     * @type {string}
     * @memberof NumbersACH
     */
    'wire_routing': string | null;
}
/**
 * `investment:` Investment account.  `credit:` Credit card  `depository:` Depository account  `loan:` Loan account  `payroll:` Payroll account  `other:` Non-specified account type  See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
 * @export
 * @enum {string}
 */

export const OverrideAccountType = {
    Investment: 'investment',
    Credit: 'credit',
    Depository: 'depository',
    Loan: 'loan',
    Payroll: 'payroll',
    Other: 'other'
} as const;

export type OverrideAccountType = typeof OverrideAccountType[keyof typeof OverrideAccountType];


/**
 * Data returned from the financial institution about the owner or owners of an account. Only the `names` array must be non-empty.
 * @export
 * @interface Owner
 */
export interface Owner {
    [key: string]: any;

    /**
     * A list of names associated with the account by the financial institution. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.  If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account\'s `names` array.
     * @type {Array<string>}
     * @memberof Owner
     */
    'names': Array<string>;
    /**
     * A list of phone numbers associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
     * @type {Array<PhoneNumber>}
     * @memberof Owner
     */
    'phone_numbers': Array<PhoneNumber>;
    /**
     * A list of email addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
     * @type {Array<Email>}
     * @memberof Owner
     */
    'emails': Array<Email>;
    /**
     * Data about the various addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
     * @type {Array<Address>}
     * @memberof Owner
     */
    'addresses': Array<Address>;
}
/**
 * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.
 * @export
 * @enum {string}
 */

export const PaymentChannel = {
    Online: 'online',
    InStore: 'in store',
    Other: 'other'
} as const;

export type PaymentChannel = typeof PaymentChannel[keyof typeof PaymentChannel];


/**
 * A phone number
 * @export
 * @interface PhoneNumber
 */
export interface PhoneNumber {
    [key: string]: any;

    /**
     * The phone number.
     * @type {string}
     * @memberof PhoneNumber
     */
    'data': string;
    /**
     * When `true`, identifies the phone number as the primary number on an account.
     * @type {boolean}
     * @memberof PhoneNumber
     */
    'primary': boolean;
    /**
     * The type of phone number.
     * @type {string}
     * @memberof PhoneNumber
     */
    'type': PhoneNumberTypeEnum;
}

export const PhoneNumberTypeEnum = {
    Home: 'home',
    Work: 'work',
    Office: 'office',
    Mobile: 'mobile',
    Mobile1: 'mobile1',
    Other: 'other'
} as const;

export type PhoneNumberTypeEnum = typeof PhoneNumberTypeEnum[keyof typeof PhoneNumberTypeEnum];

/**
 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
 * @export
 * @interface PlaidError
 */
export interface PlaidError {
    [key: string]: any;

    /**
     * 
     * @type {PlaidErrorType}
     * @memberof PlaidError
     */
    'error_type': PlaidErrorType;
    /**
     * The particular error code. Safe for programmatic use.
     * @type {string}
     * @memberof PlaidError
     */
    'error_code': string;
    /**
     * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof PlaidError
     */
    'error_message': string;
    /**
     * A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
     * @type {string}
     * @memberof PlaidError
     */
    'display_message': string | null;
    /**
     * A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.
     * @type {string}
     * @memberof PlaidError
     */
    'request_id'?: string;
    /**
     * In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
     * @type {Array<any>}
     * @memberof PlaidError
     */
    'causes'?: Array<any>;
    /**
     * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
     * @type {number}
     * @memberof PlaidError
     */
    'status'?: number | null;
    /**
     * The URL of a Plaid documentation page with more information about the error
     * @type {string}
     * @memberof PlaidError
     */
    'documentation_url'?: string;
    /**
     * Suggested steps for resolving the error
     * @type {string}
     * @memberof PlaidError
     */
    'suggested_action'?: string | null;
    /**
     * 
     * @type {FuseApiError}
     * @memberof PlaidError
     */
    'fuse_api_error': FuseApiError;
}


/**
 * A broad categorization of the error. Safe for programmatic use.
 * @export
 * @enum {string}
 */

export const PlaidErrorType = {
    InvalidRequest: 'INVALID_REQUEST',
    InvalidResult: 'INVALID_RESULT',
    InvalidInput: 'INVALID_INPUT',
    InstitutionError: 'INSTITUTION_ERROR',
    RateLimitExceeded: 'RATE_LIMIT_EXCEEDED',
    ApiError: 'API_ERROR',
    ItemError: 'ITEM_ERROR',
    AssetReportError: 'ASSET_REPORT_ERROR',
    RecaptchaError: 'RECAPTCHA_ERROR',
    OauthError: 'OAUTH_ERROR',
    PaymentError: 'PAYMENT_ERROR',
    BankTransferError: 'BANK_TRANSFER_ERROR',
    IncomeVerificationError: 'INCOME_VERIFICATION_ERROR',
    MicrodepositsError: 'MICRODEPOSITS_ERROR'
} as const;

export type PlaidErrorType = typeof PlaidErrorType[keyof typeof PlaidErrorType];


/**
 * A list of products that an institution can support. All Items must be initialized with at least one product. The Balance product is always available and does not need to be specified during initialization.
 * @export
 * @enum {string}
 */

export const Products = {
    Auth: 'auth',
    Identity: 'identity',
    Transactions: 'transactions',
    Investments: 'investments',
    Assets: 'assets',
    Balance: 'balance'
} as const;

export type Products = typeof Products[keyof typeof Products];


/**
 * 
 * @export
 * @interface SessionCreateRequest
 */
export interface SessionCreateRequest {
    /**
     * 
     * @type {Array<Aggregator>}
     * @memberof SessionCreateRequest
     */
    'supported_financial_institution_aggregators': Array<Aggregator>;
    /**
     * List of products that you would like the institutions to support
     * @type {Array<Products>}
     * @memberof SessionCreateRequest
     */
    'products': Array<Products>;
    /**
     * List of country codes that you would like the institutions to support
     * @type {Array<CountryCode>}
     * @memberof SessionCreateRequest
     */
    'country_codes'?: Array<CountryCode>;
    /**
     * 
     * @type {Entity}
     * @memberof SessionCreateRequest
     */
    'entity': Entity;
    /**
     * The fuse access token for an existing financial connection. This will perform the process to reconnect an existing disconnected account.
     * @type {string}
     * @memberof SessionCreateRequest
     */
    'access_token'?: string;
    /**
     * Set to false for web SDKs (e.g., React), and true for mobile SDKs (e.g., React Native, Flutter, iOS, Android).
     * @type {boolean}
     * @memberof SessionCreateRequest
     */
    'is_web_view'?: boolean;
}
/**
 * 
 * @export
 * @interface SessionCreateResponse
 */
export interface SessionCreateResponse {
    /**
     * 4 hours from the point of creation
     * @type {string}
     * @memberof SessionCreateResponse
     */
    'expiration': string;
    /**
     * Token needed by the frontend sdk to start the process
     * @type {string}
     * @memberof SessionCreateResponse
     */
    'client_secret': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof SessionCreateResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface SyncFinancialConnectionsDataResponse
 */
export interface SyncFinancialConnectionsDataResponse {
    /**
     * Response message
     * @type {string}
     * @memberof SyncFinancialConnectionsDataResponse
     */
    'message'?: string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof SyncFinancialConnectionsDataResponse
     */
    'request_id'?: string;
}
/**
 * A representation of a transaction
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * The ID of the account in which this transaction occurred.
     * @type {string}
     * @memberof Transaction
     */
    'account_id': string;
    /**
     * The settled value of the transaction, denominated in the transactions\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof Transaction
     */
    'amount': number;
    /**
     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof Transaction
     */
    'iso_currency_code': string | null;
    /**
     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {Array<string>}
     * @memberof Transaction
     */
    'category': Array<string> | null;
    /**
     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). To receive information about the date that a posted transaction was initiated, see the `authorized_date` field.
     * @type {string}
     * @memberof Transaction
     */
    'date': string;
    /**
     * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/sync` or `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof Transaction
     */
    'name'?: string;
    /**
     * The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
     * @type {string}
     * @memberof Transaction
     */
    'merchant_name'?: string | null;
    /**
     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     * @type {boolean}
     * @memberof Transaction
     */
    'pending': boolean;
    /**
     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     * @type {string}
     * @memberof Transaction
     */
    'transaction_id': string;
    /**
     * 
     * @type {PaymentChannel}
     * @memberof Transaction
     */
    'payment_channel': PaymentChannel;
    /**
     * Uniquely identifies this transaction across all transactions for a single financial connection. Used for reconnection deduplication. This field may or may not be present depending on if a transaction can be uniquely identified. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
     * @type {string}
     * @memberof Transaction
     */
    'fingerprint'?: string;
}


/**
 * A representation of a transaction
 * @export
 * @interface TransactionBase
 */
export interface TransactionBase {
    [key: string]: any;

    /**
     * The ID of the account in which this transaction occurred.
     * @type {string}
     * @memberof TransactionBase
     */
    'account_id': string;
    /**
     * The settled value of the transaction, denominated in the transactions\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof TransactionBase
     */
    'amount': number;
    /**
     * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
     * @type {string}
     * @memberof TransactionBase
     */
    'iso_currency_code': string | null;
    /**
     * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {Array<string>}
     * @memberof TransactionBase
     */
    'category'?: Array<string> | null;
    /**
     * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). To receive information about the date that a posted transaction was initiated, see the `authorized_date` field.
     * @type {string}
     * @memberof TransactionBase
     */
    'date': string;
    /**
     * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/sync` or `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @type {string}
     * @memberof TransactionBase
     */
    'name'?: string;
    /**
     * The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
     * @type {string}
     * @memberof TransactionBase
     */
    'merchant_name'?: string | null;
    /**
     * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     * @type {boolean}
     * @memberof TransactionBase
     */
    'pending': boolean;
    /**
     * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     * @type {string}
     * @memberof TransactionBase
     */
    'transaction_id': string;
    /**
     * 
     * @type {PaymentChannel}
     * @memberof TransactionBase
     */
    'payment_channel'?: PaymentChannel;
    /**
     * Uniquely identifies this transaction across all transactions for a single financial connection. Used for reconnection deduplication. This field may or may not be present depending on if a transaction can be uniquely identified. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
     * @type {string}
     * @memberof TransactionBase
     */
    'fingerprint'?: string;
}


/**
 * TransactionsGetRequest defines the request schema for `/transactions/get`
 * @export
 * @interface TransactionsGetRequest
 */
export interface TransactionsGetRequest {
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    'client_id'?: string;
    /**
     * 
     * @type {TransactionsGetRequestOptions}
     * @memberof TransactionsGetRequest
     */
    'options'?: TransactionsGetRequestOptions;
    /**
     * The access token associated with the Item data is being requested for.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    'access_token': string;
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    'secret'?: string;
    /**
     * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    'start_date': string;
    /**
     * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof TransactionsGetRequest
     */
    'end_date': string;
}
/**
 * An optional object to be used with the request. If specified, `options` must not be `null`.
 * @export
 * @interface TransactionsGetRequestOptions
 */
export interface TransactionsGetRequestOptions {
    /**
     * The number of transactions to fetch.
     * @type {number}
     * @memberof TransactionsGetRequestOptions
     */
    'count'?: number;
    /**
     * Specify current page.
     * @type {number}
     * @memberof TransactionsGetRequestOptions
     */
    'page'?: number;
}
/**
 * TransactionsGetResponse defines the response schema for `/transactions/get`
 * @export
 * @interface TransactionsGetResponse
 */
export interface TransactionsGetResponse {
    [key: string]: any;

    /**
     * An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter.
     * @type {Array<Transaction>}
     * @memberof TransactionsGetResponse
     */
    'transactions': Array<Transaction>;
    /**
     * The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
     * @type {number}
     * @memberof TransactionsGetResponse
     */
    'total_transactions': number;
    /**
     * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @type {string}
     * @memberof TransactionsGetResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface WebhookEvent
 */
export interface WebhookEvent {
    /**
     * 
     * @type {WebhookType}
     * @memberof WebhookEvent
     */
    'type': WebhookType;
    /**
     * Financial connection id associated with the webhook
     * @type {string}
     * @memberof WebhookEvent
     */
    'financial_connection_id': string;
    /**
     * 
     * @type {string}
     * @memberof WebhookEvent
     */
    'environment': WebhookEventEnvironmentEnum;
    /**
     * 
     * @type {WebhookSource}
     * @memberof WebhookEvent
     */
    'source': WebhookSource;
    /**
     * Aggregator verification data needed to verify the webhook
     * @type {string}
     * @memberof WebhookEvent
     */
    'verification_token'?: string;
    /**
     * Exists for assets.report_ready webhooks
     * @type {string}
     * @memberof WebhookEvent
     */
    'asset_report_id'?: string;
    /**
     * Exists for transactions.updates webhooks. Indicates if historical transaction information (up to 24 months) is ready to be queried.
     * @type {boolean}
     * @memberof WebhookEvent
     */
    'historical_transactions_available'?: boolean;
    /**
     * Exists for transactions.updates webhooks. Currently only supported by Plaid.
     * @type {Array<string>}
     * @memberof WebhookEvent
     */
    'removed_transaction_ids'?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof WebhookEvent
     */
    'remote_data': any;
}

export const WebhookEventEnvironmentEnum = {
    Sandbox: 'sandbox',
    Production: 'production'
} as const;

export type WebhookEventEnvironmentEnum = typeof WebhookEventEnvironmentEnum[keyof typeof WebhookEventEnvironmentEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const WebhookSource = {
    Plaid: 'plaid',
    Teller: 'teller',
    Mx: 'mx',
    Fuse: 'fuse',
    Snaptrade: 'snaptrade',
    Mono: 'mono',
    Truelayer: 'truelayer',
    Finverse: 'finverse'
} as const;

export type WebhookSource = typeof WebhookSource[keyof typeof WebhookSource];


/**
 * 
 * @export
 * @enum {string}
 */

export const WebhookType = {
    FinancialConnectionSyncData: 'financial_connection.sync_data',
    FinancialConnectionDisconnected: 'financial_connection.disconnected',
    FinancialConnectionFinished: 'financial_connection.finished',
    TransactionsUpdates: 'transactions.updates',
    AssetsReportReady: 'assets.report_ready'
} as const;

export type WebhookType = typeof WebhookType[keyof typeof WebhookType];



/**
 * PlaidApi - axios parameter creator
 * @export
 */
export const PlaidApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet: async (accountsBalanceGetRequest: AccountsBalanceGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountsBalanceGetRequest' is not null or undefined
            assertParamExists('accountsBalanceGet', 'accountsBalanceGetRequest', accountsBalanceGetRequest)
            const localVarPath = `/v1/financial_connections/balances?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountsBalanceGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet: async (accountsGetRequest: AccountsGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountsGetRequest' is not null or undefined
            assertParamExists('accountsGet', 'accountsGetRequest', accountsGetRequest)
            const localVarPath = `/v1/financial_connections/accounts?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet: async (authGetRequest: AuthGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authGetRequest' is not null or undefined
            assertParamExists('authGet', 'authGetRequest', authGetRequest)
            const localVarPath = `/v1/financial_connections/accounts/details?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet: async (identityGetRequest: IdentityGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityGetRequest' is not null or undefined
            assertParamExists('identityGet', 'identityGetRequest', identityGetRequest)
            const localVarPath = `/v1/financial_connections/owners?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById: async (institutionsGetByIdRequest: InstitutionsGetByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'institutionsGetByIdRequest' is not null or undefined
            assertParamExists('institutionsGetById', 'institutionsGetByIdRequest', institutionsGetByIdRequest)
            const localVarPath = `/v1/financial_connections/institutions/get?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(institutionsGetByIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange: async (itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemPublicTokenExchangeRequest' is not null or undefined
            assertParamExists('itemPublicTokenExchange', 'itemPublicTokenExchangeRequest', itemPublicTokenExchangeRequest)
            const localVarPath = `/v1/financial_connections/public_token/exchange?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemPublicTokenExchangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove: async (itemRemoveRequest: ItemRemoveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemRemoveRequest' is not null or undefined
            assertParamExists('itemRemove', 'itemRemoveRequest', itemRemoveRequest)
            const localVarPath = `/v1/financial_connections/delete?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate: async (linkTokenCreateRequest: LinkTokenCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkTokenCreateRequest' is not null or undefined
            assertParamExists('linkTokenCreate', 'linkTokenCreateRequest', linkTokenCreateRequest)
            const localVarPath = `/v1/link/token?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkTokenCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {SessionCreateRequest} [sessionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionCreate: async (sessionCreateRequest?: SessionCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/session?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {string} fuseVerification 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData: async (fuseVerification: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fuseVerification' is not null or undefined
            assertParamExists('syncFinancialConnectionsData', 'fuseVerification', fuseVerification)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('syncFinancialConnectionsData', 'body', body)
            const localVarPath = `/v1/financial_connections/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)

            if (fuseVerification != null) {
                localVarHeaderParameter['Fuse-Verification'] = String(fuseVerification);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet: async (transactionsGetRequest: TransactionsGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionsGetRequest' is not null or undefined
            assertParamExists('transactionsGet', 'transactionsGetRequest', transactionsGetRequest)
            const localVarPath = `/v1/financial_connections/transactions?isPlaidRequest=true`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaidApi - functional programming interface
 * @export
 */
export const PlaidApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaidApiAxiosParamCreator(configuration)
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsBalanceGet(accountsBalanceGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsGet(accountsGetRequest: AccountsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsGet(accountsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGet(authGetRequest: AuthGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGet(authGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityGet(identityGetRequest: IdentityGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identityGet(identityGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstitutionsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionsGetById(institutionsGetByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemPublicTokenExchangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemRemove(itemRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTokenCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkTokenCreate(linkTokenCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {SessionCreateRequest} [sessionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionCreate(sessionCreateRequest?: SessionCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionCreate(sessionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {string} fuseVerification 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncFinancialConnectionsData(fuseVerification: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncFinancialConnectionsDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncFinancialConnectionsData(fuseVerification, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsGet(transactionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlaidApi - factory interface
 * @export
 */
export const PlaidApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaidApiFp(configuration)
    return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: any): AxiosPromise<AccountsGetResponse> {
            return localVarFp.accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(accountsGetRequest: AccountsGetRequest, options?: any): AxiosPromise<AccountsGetResponse> {
            return localVarFp.accountsGet(accountsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet(authGetRequest: AuthGetRequest, options?: any): AxiosPromise<AuthGetResponse> {
            return localVarFp.authGet(authGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(identityGetRequest: IdentityGetRequest, options?: any): AxiosPromise<IdentityGetResponse> {
            return localVarFp.identityGet(identityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: any): AxiosPromise<InstitutionsGetByIdResponse> {
            return localVarFp.institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: any): AxiosPromise<ItemPublicTokenExchangeResponse> {
            return localVarFp.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: any): AxiosPromise<ItemRemoveResponse> {
            return localVarFp.itemRemove(itemRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: any): AxiosPromise<LinkTokenCreateResponse> {
            return localVarFp.linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {SessionCreateRequest} [sessionCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionCreate(sessionCreateRequest?: SessionCreateRequest, options?: any): AxiosPromise<SessionCreateResponse> {
            return localVarFp.sessionCreate(sessionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {string} fuseVerification 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData(fuseVerification: string, body: object, options?: any): AxiosPromise<SyncFinancialConnectionsDataResponse> {
            return localVarFp.syncFinancialConnectionsData(fuseVerification, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: any): AxiosPromise<TransactionsGetResponse> {
            return localVarFp.transactionsGet(transactionsGetRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaidApi - object-oriented interface
 * @export
 * @class PlaidApi
 * @extends {BaseAPI}
 */
export class PlaidApi extends BaseAPI {
    /**
     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     * @summary Retrieve real-time balance data
     * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
     * @summary Retrieve accounts
     * @param {AccountsGetRequest} accountsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public accountsGet(accountsGetRequest: AccountsGetRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).accountsGet(accountsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @summary Retrieve auth data
     * @param {AuthGetRequest} authGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public authGet(authGetRequest: AuthGetRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).authGet(authGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * @summary Retrieve identity data
     * @param {IdentityGetRequest} identityGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public identityGet(identityGetRequest: IdentityGetRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).identityGet(identityGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * @summary Get details of an institution
     * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     * @summary Exchange public token for an access token
     * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     * @summary Remove an Item
     * @param {ItemRemoveRequest} itemRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public itemRemove(itemRemoveRequest: ItemRemoveRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).itemRemove(itemRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @summary Create Link Token
     * @param {LinkTokenCreateRequest} linkTokenCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {SessionCreateRequest} [sessionCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public sessionCreate(sessionCreateRequest?: SessionCreateRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).sessionCreate(sessionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {string} fuseVerification 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public syncFinancialConnectionsData(fuseVerification: string, body: object, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).syncFinancialConnectionsData(fuseVerification, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get transaction data
     * @param {TransactionsGetRequest} transactionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaidApi
     */
    public transactionsGet(transactionsGetRequest: TransactionsGetRequest, options?: AxiosRequestConfig) {
        return PlaidApiFp(this.configuration).transactionsGet(transactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


